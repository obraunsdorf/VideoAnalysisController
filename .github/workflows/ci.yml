on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'enable ssh debugging'     
        required: false
        default: 'false'
      release_version_tag:
         description: 'Draft a Github release with version/tag:'     
         required: false
         default: ''

name: Continuous integration

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version_tag != '' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_version_tag }}
          release_name: ${{ github.event.inputs.release_version_tag }}
          draft: true

  Build_and_Test:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        rust:
          - 1.53.0  # Minimum Supported Rust Version
        include:
          - os: windows-latest
            artifact_name: VACsetup.exe
            artifact_path: Output/VACsetup.exe
          - os: ubuntu-latest
            artifact_name: VideoAnalysisController
            artifact_path: target/release/VideoAnalysisController
            
    steps:
      - uses: actions/checkout@v2

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get -y install libinput-dev libxtst-dev libudev-dev ffmpeg libvlc-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libpng-dev libgl1-mesa-dev libglu1-mesa-dev
        
      - name: Install Windows Dependencies
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          nuget install VideoLAN.LibVLC.Windows -Version 3.0.16 -OutputDirectory blubVLCbla

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Manually execute cargo build on Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set VLC_LIB_DIR=%GITHUB_WORKSPACE%\blubVLCbla\VideoLAN.LibVLC.Windows.3.0.16\build\x64\
          cargo build --release
          
      
      - uses: actions-rs/cargo@v1
        if: matrix.os != 'windows-latest'
        with:
          command: build
          args: --release

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

  #    - uses: actions-rs/cargo@v1
  #      with:
  #        command: fmt
  #        args: --all -- --check

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --release
          
      - name: Innosetup
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" innosetup.iss
          
      - name: Setup tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true' }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          
      - name: Upload Github Release Artifact
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version_tag != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_path }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream
